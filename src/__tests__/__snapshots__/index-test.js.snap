// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`it dynamically generates the name of the trampoline function based on the global program scope 1`] = `
"const _trampoline = () => {};

const trampoline = () => {};

function _trampoline2(fn) {
  return function trampolined(...args) {
    let result = fn(...args);

    while (typeof result === 'function') {
      result = result();
    }

    return result;
  };
}"
`;

exports[`works 1`] = `
"var simpleTailCall = _trampoline(function simpleTailCall() {
  return () => {
    return simpleTailCall();
  };
});

function _trampoline(fn) {
  return function trampolined(...args) {
    let result = fn(...args);

    while (typeof result === 'function') {
      result = result();
    }

    return result;
  };
}"
`;

exports[`works for functions with multiple function calls 1`] = `
"var weirdCounter = _trampoline(function weirdCounter(n, acc = 0) {
  if (n <= 0) {
    return acc;
  }

  if (n < 10) {
    return () => {
      return weirdCounter(n - 1, acc + 1);
    };
  }

  if (n < 100) {
    return () => {
      return weirdCounter(n - 1, acc + 10);
    };
  }

  return () => {
    return weirdCounter(n - 1, acc + 100);
  };
});

function _trampoline(fn) {
  return function trampolined(...args) {
    let result = fn(...args);

    while (typeof result === 'function') {
      result = result();
    }

    return result;
  };
}"
`;

exports[`works for ternary expressions with explicit return 1`] = `
"const counter = _trampoline((n, acc = 0) => {
  return () => {
    return n === 0 ? acc : counter(n - 1, acc + 1);
  };
});

function _trampoline(fn) {
  return function trampolined(...args) {
    let result = fn(...args);

    while (typeof result === 'function') {
      result = result();
    }

    return result;
  };
}"
`;

exports[`works for ternary expressions with implicit return 1`] = `
"const counter = _trampoline((n, acc = 0) => () => {
  return n === 0 ? acc : counter(n - 1, acc + 1);
});

function _trampoline(fn) {
  return function trampolined(...args) {
    let result = fn(...args);

    while (typeof result === 'function') {
      result = result();
    }

    return result;
  };
}"
`;
